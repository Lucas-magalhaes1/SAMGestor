// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAMGestor.Infrastructure.Persistence;

#nullable disable

namespace SAMGestor.Infrastructure.Migrations
{
    [DbContext(typeof(SAMContext))]
    [Migration("20250914173615_Families_RowLock")]
    partial class Families_RowLock
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAMGestor.Domain.Entities.BlockedCpf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("blocked_cpfs", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("entity_name");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("change_logs", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.HasIndex("RetreatId");

                    b.HasIndex("RetreatId", "Name")
                        .IsUnique();

                    b.ToTable("families", "core", t =>
                        {
                            t.HasCheckConstraint("ck_families_capacity_positive", "capacity > 0");
                        });
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.FamilyMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("FamilyId", "Position")
                        .IsUnique();

                    b.HasIndex("FamilyId", "RegistrationId")
                        .IsUnique();

                    b.HasIndex("RetreatId", "FamilyId");

                    b.HasIndex("RetreatId", "RegistrationId")
                        .IsUnique();

                    b.ToTable("family_members", "core", t =>
                        {
                            t.HasCheckConstraint("ck_family_members_position_nonneg", "position >= 0");
                        });
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.MessageSent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_template_id");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("messages_sent", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.MessageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<bool>("HasPlaceholders")
                        .HasColumnType("boolean")
                        .HasColumnName("has_placeholders");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("message_templates", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("payments", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.RegionConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<string>("Observation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("observation");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.HasIndex("RetreatId", "Name")
                        .IsUnique();

                    b.ToTable("region_configs", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("city");

                    b.Property<bool>("CompletedRetreat")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_retreat");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("email");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("ParticipationCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("participation_category");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("region");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Cpf");

                    b.HasIndex("Email");

                    b.HasIndex("RetreatId", "Cpf")
                        .IsUnique();

                    b.HasIndex("RetreatId", "Email")
                        .IsUnique();

                    b.HasIndex("RetreatId", "Status", "Gender");

                    b.ToTable("registrations", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Retreat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ContemplationClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("contemplation_closed");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("edition");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("FamiliesLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("families_locked");

                    b.Property<int>("FamiliesVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("families_version");

                    b.Property<int>("FemaleSlots")
                        .HasColumnType("integer")
                        .HasColumnName("female_slots");

                    b.Property<int>("MaleSlots")
                        .HasColumnType("integer")
                        .HasColumnName("male_slots");

                    b.Property<DateOnly>("RegistrationEnd")
                        .HasColumnType("date")
                        .HasColumnName("registration_end");

                    b.Property<DateOnly>("RegistrationStart")
                        .HasColumnType("date")
                        .HasColumnName("registration_start");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("theme");

                    b.HasKey("Id");

                    b.ToTable("retreats", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<int>("MemberLimit")
                        .HasColumnType("integer")
                        .HasColumnName("member_limit");

                    b.Property<int>("MinMembers")
                        .HasColumnType("integer")
                        .HasColumnName("min_members");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.ToTable("teams", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "RegistrationId")
                        .IsUnique();

                    b.ToTable("team_members", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Tent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.ToTable("tents", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.WaitingListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<Guid>("RetreatId")
                        .HasColumnType("uuid")
                        .HasColumnName("retreat_id");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId")
                        .IsUnique();

                    b.HasIndex("RetreatId", "Position")
                        .IsUnique();

                    b.ToTable("waiting_list_items", "core");
                });

            modelBuilder.Entity("SAMGestor.Infrastructure.Messaging.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastError")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("ix_outbox_processed");

                    b.HasIndex("Type", "CreatedAt")
                        .HasDatabaseName("ix_outbox_type_created");

                    b.ToTable("outbox_messages", "core");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Family", b =>
                {
                    b.HasOne("SAMGestor.Domain.Entities.Retreat", null)
                        .WithMany()
                        .HasForeignKey("RetreatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.FamilyMember", b =>
                {
                    b.HasOne("SAMGestor.Domain.Entities.Family", null)
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAMGestor.Domain.Entities.Registration", null)
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Payment", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments", "core");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.RegionConfig", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Percentage", "TargetPercentage", b1 =>
                        {
                            b1.Property<Guid>("RegionConfigId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("target_percentage");

                            b1.HasKey("RegionConfigId");

                            b1.ToTable("region_configs", "core");

                            b1.WithOwner()
                                .HasForeignKey("RegionConfigId");
                        });

                    b.Navigation("TargetPercentage")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Registration", b =>
                {
                    b.HasOne("SAMGestor.Domain.Entities.Retreat", null)
                        .WithMany()
                        .HasForeignKey("RetreatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("RegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");

                            b1.HasKey("RegistrationId");

                            b1.ToTable("registrations", "core");

                            b1.WithOwner()
                                .HasForeignKey("RegistrationId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.UrlAddress", "PhotoUrl", b1 =>
                        {
                            b1.Property<Guid>("RegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("photo_url");

                            b1.HasKey("RegistrationId");

                            b1.ToTable("registrations", "core");

                            b1.WithOwner()
                                .HasForeignKey("RegistrationId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhotoUrl");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Retreat", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Money", "FeeFazer", b1 =>
                        {
                            b1.Property<Guid>("RetreatId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("fee_fazer_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("fee_fazer_currency");

                            b1.HasKey("RetreatId");

                            b1.ToTable("retreats", "core");

                            b1.WithOwner()
                                .HasForeignKey("RetreatId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Money", "FeeServir", b1 =>
                        {
                            b1.Property<Guid>("RetreatId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("fee_servir_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("fee_servir_currency");

                            b1.HasKey("RetreatId");

                            b1.ToTable("retreats", "core");

                            b1.WithOwner()
                                .HasForeignKey("RetreatId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("RetreatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");

                            b1.HasKey("RetreatId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("retreats", "core");

                            b1.WithOwner()
                                .HasForeignKey("RetreatId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Percentage", "OtherRegionsPercentage", b1 =>
                        {
                            b1.Property<Guid>("RetreatId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("other_regions_pct");

                            b1.HasKey("RetreatId");

                            b1.ToTable("retreats", "core");

                            b1.WithOwner()
                                .HasForeignKey("RetreatId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.Percentage", "WestRegionPercentage", b1 =>
                        {
                            b1.Property<Guid>("RetreatId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("west_region_pct");

                            b1.HasKey("RetreatId");

                            b1.ToTable("retreats", "core");

                            b1.WithOwner()
                                .HasForeignKey("RetreatId");
                        });

                    b.Navigation("FeeFazer")
                        .IsRequired();

                    b.Navigation("FeeServir")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("OtherRegionsPercentage")
                        .IsRequired();

                    b.Navigation("WestRegionPercentage")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Team", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");

                            b1.HasKey("TeamId");

                            b1.ToTable("teams", "core");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("SAMGestor.Domain.Entities.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Tent", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.TentNumber", "Number", b1 =>
                        {
                            b1.Property<Guid>("TentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number");

                            b1.HasKey("TentId");

                            b1.ToTable("tents", "core");

                            b1.WithOwner()
                                .HasForeignKey("TentId");
                        });

                    b.Navigation("Number")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.User", b =>
                {
                    b.OwnsOne("SAMGestor.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "core");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(160)
                                .HasColumnType("character varying(160)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("users", "core");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("SAMGestor.Domain.ValueObjects.PasswordHash", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("password_hash");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "core");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SAMGestor.Domain.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
